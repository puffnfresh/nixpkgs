diff --git a/src/SeExprEditor/SeExprEdColorSwatchWidget.h b/src/SeExprEditor/SeExprEdColorSwatchWidget.h
index e13fbbe..446cda1 100644
--- a/src/SeExprEditor/SeExprEdColorSwatchWidget.h
+++ b/src/SeExprEditor/SeExprEdColorSwatchWidget.h
@@ -55,7 +55,7 @@ class SeExprEdColorSwatchWidget : public QWidget
     Q_OBJECT
 
 public:
-    SeExprEdColorSwatchWidget(bool indexLabel, QWidget* parent = 0);
+    SeExprEdColorSwatchWidget(bool indexLabel = false, QWidget* parent = nullptr);
     ~SeExprEdColorSwatchWidget() {}
 
     // Convenience Functions
diff --git a/src/SeExprEditor/SeExprEdDialog.h b/src/SeExprEditor/SeExprEdDialog.h
index a1ce153..607a7ae 100644
--- a/src/SeExprEditor/SeExprEdDialog.h
+++ b/src/SeExprEditor/SeExprEdDialog.h
@@ -67,7 +67,7 @@ private:
     QString prevFind;
     int _currentEditorIdx;
 public:
-    SeExprEdDialog(QWidget* parent);
+    SeExprEdDialog(QWidget* parent = nullptr);
 
     std::string getExpressionString()
     {
diff --git a/src/SeExprEditor/SeExprEditor.sip b/src/SeExprEditor/SeExprEditor.sip
index 52c84d9..8e3d91c 100644
--- a/src/SeExprEditor/SeExprEditor.sip
+++ b/src/SeExprEditor/SeExprEditor.sip
@@ -15,7 +15,7 @@
     newstring = PyUnicode_DecodeUTF8(sipCpp->c_str(), sipCpp->length(), NULL);
     if(newstring == NULL) {
         PyErr_Clear();
-        newstring = PyString_FromString(sipCpp->c_str());
+        newstring = PyUnicode_FromString(sipCpp->c_str());
     }
     return newstring;
 %End
@@ -26,21 +26,17 @@
      // If argument is a Unicode string, just decode it to UTF-8
      // If argument is a Python string, assume it's UTF-8
      if (sipIsErr == NULL)
-                return (PyString_Check(sipPy) || PyUnicode_Check(sipPy));
+                return PyUnicode_Check(sipPy);
         if (sipPy == Py_None) {
                 *sipCppPtr = new std::string;
                 return 1;
         }
         if (PyUnicode_Check(sipPy))        {
         PyObject* s = PyUnicode_AsEncodedString(sipPy, "UTF-8", "");
-        *sipCppPtr = new std::string(PyString_AS_STRING(s));
+        *sipCppPtr = new std::string(PyUnicode_AS_DATA(s));
         Py_DECREF(s);
         return 1;
         }
-        if (PyString_Check(sipPy)) {
-        *sipCppPtr = new std::string(PyString_AS_STRING(sipPy));
-            return 1;
-        }
     return 0;
 %End
 };
